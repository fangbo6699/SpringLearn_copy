<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
		   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		   xmlns:util="http://www.springframework.org/schema/util"
		   xmlns:p="http://www.springframework.org/schema/p"
		   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">

		<!-- 配置一个 bean -->
		<bean id="helloWorld" class="com.fangbo.spring.helloworld.HelloWorld">
			<!-- 为属性赋值 -->
			<property name="user" value="Jerry"></property>
		</bean>


		<!-- 配置一个 bean -->
		<bean id="helloWorld2" class="com.fangbo.spring.helloworld.HelloWorld">
			<!-- 为属性赋值 -->
			<!-- 通过属性注入: 通过 setter 方法注入属性值 -->
			<property name="user" value="Tom"></property>
		</bean>




	<!-- 通过构造器注入属性值 -->
	<bean id="helloWorld3" class="com.fangbo.spring.helloworld.HelloWorld">
		<!-- 要求: 在 Bean 中必须有对应的构造器.  -->
		<constructor-arg value="Mike"></constructor-arg>
	</bean>

	<!-- 若一个 bean 有多个构造器, 如何通过构造器来为 bean 的属性赋值 -->
	<!-- 可以根据 index 和 value 进行更加精确的定位. (了解) -->
	<bean id="car" class="com.fangbo.spring.helloworld.Car">
		<constructor-arg value="KUGA" index="1"></constructor-arg>
		<constructor-arg value="ChangAnFord" index="0"></constructor-arg>
		<constructor-arg value="250000" type="float"></constructor-arg>

	</bean>

	<bean id="car2" class="com.fangbo.spring.helloworld.Car">
		<constructor-arg value="ChangAnMazda"></constructor-arg>
		<!-- 若字面值中包含特殊字符, 则可以使用 DCDATA 来进行赋值. (了解) -->
		<constructor-arg>
			<value><![CDATA[<ATARZA>！*&]]></value>
		</constructor-arg>
		<constructor-arg value="180" type="int"></constructor-arg>
	</bean>
	<!---->
	<bean id="person" class="com.fangbo.spring.helloworld.Person">
		<property name="name" value="fangbo"></property>
		<property name="age" value="18"></property>
		<!--<property name="car" ref="car"></property>-->
		<property name="car">
			<ref bean="car2"></ref>
		</property>
	</bean>

	<bean id="person1" class="com.fangbo.spring.helloworld.Person">
		<property name="name" value="bobo"></property>
		<property name="age" value="22"></property>
		<!--内部bean-->
		<property name="car">
			<bean class="com.fangbo.spring.helloworld.Car">
				<constructor-arg value="fangbogongsi"></constructor-arg>
				<constructor-arg value="xuefu"></constructor-arg>
				<constructor-arg value="12000.8"></constructor-arg>
			</bean>

		</property>
	</bean>


	<!--可以使用专用的 <null/> 元素标签为 Bean 的字符串或其它对象类型的属性注入 null 值-->\
	<bean id="person2" class="com.fangbo.spring.helloworld.Person">
		<property name="name" value="liudaiqiang"></property>
		<property name="age" value="23"></property>
	</bean>

	<bean id="person3" class="com.fangbo.spring.helloworld.Person">
		<!--<property name="name" value="lichengen"></property>-->
		<!--<property name="age" value="25"></property>-->
		<!--<property name="car"><null/>></property>-->
		<constructor-arg value="lichengen" type="java.lang.String"></constructor-arg>
		<constructor-arg value="25" type="int"></constructor-arg>

	</bean>


	<!--和 Struts、Hiberante 等框架一样，Spring 支持级联属性的配置
	属性需要先初始化后才可以为级联属性赋值，否则会有异常。
	-->
	<bean id="person4" class="com.fangbo.spring.helloworld.Person">
		<property name="name" value="bobo"></property>
		<property name="age" value="22"></property>
		<!--内部bean-->
		<property name="car">
		<bean class="com.fangbo.spring.helloworld.Car">
			<constructor-arg value="fangbogongsi"></constructor-arg>
			<constructor-arg value="xuefu"></constructor-arg>
			<constructor-arg value="12000.8"></constructor-arg>
		</bean>

		</property>
		<property name="car.maxSpeed" value="5600"></property>
	</bean>





	<!-- 配置 bean -->
	<!--<bean id="dao5" class="com.atguigu.spring.ref.Dao"></bean>-->

	<!--<bean id="service" class="com.atguigu.spring.ref.Service">-->
		<!--&lt;!&ndash; 通过 ref 属性值指定当前属性指向哪一个 bean! &ndash;&gt;-->
		<!--<property name="dao" ref="dao5"></property>-->
	<!--</bean>-->
	<!---->
	<!--&lt;!&ndash; 声明使用内部 bean &ndash;&gt;-->
	<!--<bean id="service2" class="com.atguigu.spring.ref.Service">-->
		<!--<property name="dao">-->
			<!--&lt;!&ndash; 内部 bean, 类似于匿名内部类对象. 不能被外部的 bean 来引用, 也没有必要设置 id 属性 &ndash;&gt;-->
			<!--<bean class="com.atguigu.spring.ref.Dao">-->
				<!--<property name="dataSource" value="c3p0"></property>-->
			<!--</bean>-->
		<!--</property>-->
	<!--</bean>-->
	<!---->
	<!--<bean id="action" class="com.atguigu.spring.ref.Action">-->
		<!--<property name="service" ref="service2"></property>-->
		<!--&lt;!&ndash; 设置级联属性(了解) &ndash;&gt;-->
		<!--<property name="service.dao.dataSource" value="DBCP2"></property>-->
	<!--</bean>-->
	<!---->
	<!--<bean id="dao2" class="com.atguigu.spring.ref.Dao">-->
		<!--&lt;!&ndash; 为 Dao 的 dataSource 属性赋值为 null, 若某一个 bean 的属性值不是 null, 使用时需要为其设置为 null(了解) &ndash;&gt;-->
		<!--<property name="dataSource"><null/></property>-->
	<!--</bean>-->
	<!---->
	<!--&lt;!&ndash; 装配集合属性 &ndash;&gt;-->
	<!--<bean id="user" class="com.atguigu.spring.helloworld.User">-->
		<!--<property name="userName" value="Jack"></property>-->
		<!--<property name="cars">-->
			<!--&lt;!&ndash; 使用 list 元素来装配集合属性 &ndash;&gt;-->
			<!--<list>-->
				<!--<ref bean="car"/>-->
				<!--<ref bean="car2"/>-->
			<!--</list>-->
		<!--</property>-->
	<!--</bean>-->
	<!---->
	<!--&lt;!&ndash; 声明集合类型的 bean &ndash;&gt;-->
	<!--<util:list id="cars">-->
		<!--<ref bean="car"/>-->
		<!--<ref bean="car2"/>-->
	<!--</util:list>-->
	<!---->
	<!--<bean id="user2" class="com.atguigu.spring.helloworld.User">-->
		<!--<property name="userName" value="Rose"></property>-->
		<!--&lt;!&ndash; 引用外部声明的 list &ndash;&gt;-->
		<!--<property name="cars" ref="cars"></property>-->
	<!--</bean>-->
	<!---->
	<!--<bean id="user3" class="com.atguigu.spring.helloworld.User"-->
		<!--p:cars-ref="cars" p:userName="Titannic"></bean>-->
		<!---->
	<!--&lt;!&ndash; bean 的配置能够继承吗 ? 使用 parent 来完成继承 &ndash;&gt;	-->
	<!--<bean id="user4" parent="user" p:userName="Bob"></bean>-->
	<!---->
	<!--<bean id="user6" parent="user" p:userName="维多利亚"></bean>-->
	<!---->
	<!--&lt;!&ndash; 测试 depents-on &ndash;&gt;	-->
	<!--<bean id="user5" parent="user" p:userName="Backham" depends-on="user6"></bean>-->
	
</beans>
